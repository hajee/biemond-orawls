#
# The functions in this file are available in all WLST sessions within the daemon. You can use
# them in all actions.
#
import re

print 'Defining all common functions'

def quote(text):
    if text or text == '':
        return "\"" + str(text).replace("\"", "\"\"") + "\""
    else:
        return ""

def set_password(password):
    if password:
        print 'set unencrypted password'
        set('Password', password)

def password_to_string(value):
    string_value = ''
    for byte in value:
        string_value = string_value + chr(byte)
    return string_value

def decrypt_value(encrypted_value):
    domain_dir = get('RootDirectory')
    domain_dir_path = os.path.abspath(domain_dir)
    encrypt_srv = weblogic.security.internal.SerializedSystemIni.getEncryptionService(domain_dir_path)
    ces = weblogic.security.internal.encryption.ClearOrEncryptedService(encrypt_srv)
    password = ces.decrypt(encrypted_value)
    return password

def type_for(full_key):
    path, key = elements_from_path(full_key)
    old_path = pwd()
    cd(path)
    try:
        attribute_type = getMBI().getAttribute(key).descriptor.getFieldValue('interfaceclassname')
    except:
        print 'error fetching man attribute info for key ' + key
        attribute_type = ''
    if attribute_type == '' or attribute_type == None:
        return 'str'
    else:
        return attribute_type

def is_encrypted(full_key):
    elements = full_key.split('/')
    key      = elements.pop()
    path     = '/'.join(elements)
    print path
    print key
    old_path = pwd()
    cd(path)
    key_description = man(key)
    cd(old_path)
    return re.search("\|encrypted : (true)\|\|", key_description) != None

def auto_typed_set(key, value):
    key_type = type_for(key)
    #
    # Don't do anything if the value is not specified
    #
    if not value:
        return
    if key_type == 'int' or key_type == 'long':
        print 'Setting integer property ' + key + ' to ' + value
        set(key,int(value))
    if key_type == 'boolean':
        print 'Setting boolean property ' + key + ' to ' + value
        real_value = (value == 'True' or value == 'true' or value == '1')
        set(key,real_value)
    elif key_type == 'float':
        print 'Setting float property ' + key + ' to ' + value
        set(key,float(value))
    elif key_type == 'array':
        print 'Setting array property ' + key + ' to ' + value
        set(key, jarray.array(value, String))
    else:
        print 'Setting generic property ' + key + ' to ' + value
        set(key,value)



print 'done defining all common functions'
